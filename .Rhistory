## exponential margins
dataexp4 <-margtransf(data4, qmarg = qmarg)@dataexp
alphas_exp4 <-heff_tawn_alphas(dataexp4, q = qalphas)
## laplace margins
alphas_lap4 <- c(mex(data4, which = 2, mqu = qmarg, dqu = qalphas, margins = "laplace")$dependence$coefficients[1],
mex(data4, which = 1, mqu = qmarg, dqu = qalphas, margins = "laplace")$dependence$coefficients[1])
data5 <- rmvnorm(n, sigma = matrix(c(1, -0.1, -0.1, 1), nrow = 2), mean = c(0, 0))
## exponential margins
dataexp5 <- margtransf(data5, qmarg = qmarg)@dataexp
alphas_exp5 <- heff_tawn_alphas(dataexp5, q = qalphas)
## laplace margins
alphas_lap5 <- c(mex(data5, which = 2, mqu = qmarg, dqu = qalphas, margins = "laplace")$dependence$coefficients[1],
mex(data5, which = 1, mqu = qmarg, dqu = qalphas, margins = "laplace")$dependence$coefficients[1])
alphas_exp1; alphas_lap1
alphas_exp2; alphas_lap2
alphas_exp3; alphas_lap3
alphas_exp4; alphas_lap4
alphas_exp5; alphas_lap5
class(dataexp1)
class(margtransf(data1, qmarg = qmarg))
isClass(margtransf(data1, qmarg = qmarg))
?isClass
?isS4
attr(margtransf(data1, qmarg = qmarg), "class")
if(class(margtransf(data1, qmarg = qmarg))[1] == "margtransf.class"){print("hi")}
if(class(margtransf(data1, qmarg = qmarg))[1] != "margtransf.class"){print("hi")}
texmex::mexDependence
if(!inherits(margdata(data1)), "margtransf.class")){print("hi")}
if(!inherits(margdata(data1), "margtransf.class")){print("hi")}
if(!inherits(margtrnasf(data1), "margtransf.class")){print("hi")}
if(!inherits(margtransf(data1), "margtransf.class")){print("hi")}
if(inherits(margtransf(data1), "margtransf.class")){print("hi")}
rm(list = ls())
HeffTawnNegLL <- function(X, Y, par){
alpha <- par[1]
beta <- par[2]
sig <- par[3]
mu <- par[4]
if(alpha < 0 || alpha > 1 || beta > 1 || beta < 0 || sig <= 0){
return(1e10)
}
negloglik <- -sum(dnorm(Y, alpha*X + mu*((X)^beta), sig*((X)^beta), log = T))
if(is.finite(negloglik)){
return(negloglik)
}
else{
return(1e10)
}
}
heff_tawn_alphas <- function(data, q){
if(any(q < 0) | any(q > 1)){
stop("Marginal quantile needs to be in [0, 1].")
}
u <- sapply(1:dim(data)[2], function(i) quantile(data[, i], probs = q[i]))
excdata <- sapply(1:dim(data)[2], function(i) data[data[, i] > u[i], ], simplify = F)
par <- rep(1/2, 4)
Yopt <- optim(fn = HeffTawnNegLL, X = excdata[[2]][, 2], Y = excdata[[2]][, 1], par = par, control = list(maxit = 100000))
Ypar <- Yopt$par
Xopt <- optim(fn = HeffTawnNegLL, X = excdata[[1]][, 1], Y = excdata[[1]][, 2], par = par, control = list(maxit = 100000))
Xpar <- Xopt$par
return(c(Ypar[1], Xpar[1]))
}
# Laplace
inv.cdf.stdLaplace = function(x){
y = 0 - 1*sign(x - 0.5)*log(1 - 2*abs(x - 0.5))
return(y)
}
HeffTawnNegLL_lap <- function(X, Y, par){
alpha <- par[1]
beta <- par[2]
sig <- par[3]
mu <- par[4]
if(alpha < -1 || alpha > 1 || beta > 1 || beta < -1 || sig <= 0){
return(1e10)
}
negloglik <- -sum(dnorm(Y, alpha*X + mu*((X)^beta), sig*((X)^beta), log = T))
if(is.finite(negloglik)){
return(negloglik)
}
else{
return(1e10)
}
}
heff_tawn_alphas_lap <- function(data, q){
if(any(q < 0) | any(q > 1)){
stop("Marginal quantile needs to be in [0, 1].")
}
u <- sapply(1:dim(data)[2], function(i) quantile(data[, i], probs = q[i]))
excdata <- sapply(1:dim(data)[2], function(i) data[data[, i] > u[i], ], simplify = F)
par <- rep(1/2, 4)
Yopt <- optim(fn = HeffTawnNegLL_lap, X = excdata[[2]][, 2], Y = excdata[[2]][, 1], par = par, control = list(maxit = 100000))
Ypar <- Yopt$par
Xopt <- optim(fn = HeffTawnNegLL_lap, X = excdata[[1]][, 1], Y = excdata[[1]][, 2], par = par, control = list(maxit = 100000))
Xpar <- Xopt$par
return(c(Ypar[1], Xpar[1]))
}
library(copula)
library(MASS)
library(mvtnorm)
library(evd)
library(ismev)
qmarg <- rep(0.95, 2)
qalphas <- rep(0.95, 2)
n <- 10000
data1 <- rmvnorm(n, sigma = matrix(c(1, -0.9, -0.9, 1), nrow = 2), mean = c(0, 5))
## exponential margins
library(ReturnCurves)
dataexp1 <- margtransf(data1, qmarg = qmarg)@dataexp
alphas_exp1 <- heff_tawn_alphas(dataexp1, q = qalphas)
## laplace margins
datalap1 <- apply(apply(dataexp1, 2, pexp), 2, inv.cdf.stdLaplace)
alphas_lap1 <- heff_tawn_alphas_lap(datalap1, q = qalphas)
alphas_lap1
data2 <- rmvnorm(n, sigma = matrix(c(1, -0.75, -0.75, 1), nrow = 2), mean = c(-1, 2))
dataexp2 <- margtransf(data2, qmarg = qmarg)@dataexp
alphas_exp2 <- heff_tawn_alphas(dataexp2, q = qalphas)
alphas_lap2 <- heff_tawn_alphas_lap(datalap2, q = qalphas)
## laplace margins
datalap2 <- apply(apply(dataexp2, 2, pexp), 2, inv.cdf.stdLaplace)
alphas_lap2 <- heff_tawn_alphas_lap(datalap2, q = qalphas)
data3 <- rmvnorm(n, sigma = matrix(c(1, -0.5, -0.5, 1), nrow = 2), mean = c(0, 0))
## exponential margins
dataexp3 <- margtransf(data3, qmarg = qmarg)@dataexp
alphas_exp3 <- heff_tawn_alphas(dataexp3, q = qalphas)
## laplace margins
datalap3 <- apply(apply(dataexp3, 2, pexp), 2, inv.cdf.stdLaplace)
alphas_lap3 <- heff_tawn_alphas_lap(datalap3, q = qalphas)
data4 <- rmvnorm(n, sigma = matrix(c(1, -0.25, -0.25, 1), nrow = 2), mean = c(2, 3))
## exponential margins
dataexp4 <- margtransf(data4, qmarg = qmarg)@dataexp
alphas_exp4 <- heff_tawn_alphas(dataexp4, q = qalphas)
## laplace margins
datalap4 <- apply(apply(dataexp4, 2, pexp), 2, inv.cdf.stdLaplace)
alphas_lap4 <- heff_tawn_alphas_lap(datalap4, q = qalphas)
data5 <- rmvnorm(n, sigma = matrix(c(1, -0.1, -0.1, 1), nrow = 2), mean = c(0, 0))
## exponential margins
dataexp5 <- margtransf(data5, qmarg = qmarg)@dataexp
alphas_exp5 <- heff_tawn_alphas(dataexp5, q = qalphas)
## laplace margins
datalap5 <- apply(apply(dataexp5, 2, pexp), 2, inv.cdf.stdLaplace)
alphas_lap5 <- heff_tawn_alphas_lap(datalap5, q = qalphas)
alphas_exp1; alphas_lap1
alphas_exp2; alphas_lap2
alphas_exp3; alphas_lap3
alphas_exp4; alphas_lap4
alphas_exp5; alphas_lap5
dataexp6 <- qexp(cbind(rCopula(n, FrankCopula(-5)), rCopula(n, FrankCopula(-2))))
dataexp6 <- qexp(cbind(rCopula(n, frankCopula(-5)), rCopula(n, frankCopula(-2))))
dataunif6 <- cbind(rCopula(n, frankCopula(-5)), rCopula(n, frankCopula(-2)))
dataexp6 <- qexp(dataunif6)
alphas_exp6 <- heff_tawn_alphas(dataexp6, q = qalphas)
## laplace margins
datalap6 <- apply(dataunif6, 2, inv.cdf.stdLaplace)
alphas_lap6 <- heff_tawn_alphas_lap(datalap6, q = qalphas)
alphas_exp6; alphas_lap6
dataunif7 <- cbind(rCopula(n, frankCopula(-2)), rCopula(n, frankCopula(-1.5)))
## exponential margins
dataexp7 <- qexp(dataunif7)
alphas_exp7 <- heff_tawn_alphas(dataexp7, q = qalphas)
## laplace margins
datalap7 <- apply(dataunif7, 2, inv.cdf.stdLaplace)
alphas_lap7 <- heff_tawn_alphas_lap(datalap7, q = qalphas)
alphas_exp7; alphas_lap7
dataunif8 <- cbind(rCopula(n, frankCopula(-1)), rCopula(n, frankCopula(-0.5)))
## exponential margins
dataexp8 <- qexp(dataunif8)
alphas_exp8 <- heff_tawn_alphas(dataexp8, q = qalphas)
## laplace margins
datalap8 <- apply(dataunif8, 2, inv.cdf.stdLaplace)
alphas_lap8 <- heff_tawn_alphas_lap(datalap8, q = qalphas)
alphas_exp8; alphas_lap8
alphas_exp8; alphas_lap8
## UK/US and UK/Canada exchange rates
library(ismev)
data("exchange")
library(ReturnCurves)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
library(ReturnCurves)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
war = c(TRUE, TRUE)
war
library(ReturnCurves)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
typeof(war)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = c(T, T))
library(ReturnCurves)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
?gpd.fit
whill <- seq(0, 1, by = 0.001)
w <- seq(0, 1, by = 0.01)
q <- 0.85
prob <- 10/dim(exchange)[1]
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
rc_unc_cl <- rc_unc(curve_cl)
warnings()
?supressWarnings
?supress
?suppressWarnings
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
options(warn = 0)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
options(warn = 0)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = F)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
?tryCatch
?margtransf
?sprintf
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85), war = T)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
rc_unc_cl <- rc_unc(curve_cl)
?grepl
rc_unc_cl <- rc_unc(curve_cl)
warnings()
rc_unc_cl <- rc_unc(curve_cl)
warnings()
rc_unc_cl <- rc_unc(curve_cl)
rc_unc_cl <- rc_unc(curve_cl)
?invokeRestart
rc_unc_cl <- rc_unc(curve_cl)
warnings()
rc_unc_cl <- rc_unc(curve_cl)
rc_unc_cl <- rc_unc(curve_cl, nboot = 100)
rc_unc(curve_cl, nboot = 100)
rc_unc(curve_cl, nboot = 100)
rc_unc(curve_cl, nboot = 100)
rc_unc(curve_cl, nboot = 100)
a<- rc_unc(curve_cl, nboot = 100)
a<- rc_unc(curve_cl, nboot = 100)
a<- rc_unc(curve_cl, nboot = 100)
a<- rc_unc(curve_cl, nboot = 100)
typeof(c(2, 3))
example("margtransf")
example("margtransf")
a <- ReturnCurves:::empirical_cdf(data)
a <- ReturnCurves:::empirical_cdf(data[, 1], 0.95, F)
a
example("margtransf")
margdata
rm(list = ls())
library(ReturnCurves)
?margtransf
set.seed(321)
data <- cbind(rnorm(1000), rnorm(1000))
margdata <- margtransf(data)
margdata@parameters
example("margtransf")
example("rc_est")
margdata
margdata@parameters
example("rc_est")
rm(list = ls())
## UK/US and UK/Canada exchange rates
library(ismev)
data("exchange")
library(ReturnCurves)
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
whill <- seq(0, 1, by = 0.001)
w <- seq(0, 1, by = 0.01)
q <- 0.85
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
prob <- 10/dim(exchange)[1]
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
?rc_est
set.seed(321)
data <- cbind(rnorm(1000), rnorm(1000))
n <- dim(data)[1]
prob <- 1/n
str(margdata)
margdata <- margtransf(data)
str(margdata)
rc_est(margdata = margdata, p = prob, method = "hill")
data("exchange")
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
whill <- seq(0, 1, by = 0.001)
w <- seq(0, 1, by = 0.01)
q <- 0.85
prob <- 10/dim(exchange)[1]
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
rc_gof_cl <- rc_gof(curve_cl)
plot(curve_cl)
curve_cl@rc
rm(list = ls())
library(ReturnCurves)
example("margtransf")
rm(list = ls())
library(ReturnCurves)
example("margtransf")
rm(list = ls())
library(ReturnCurves)
example("margtransf")
example(rc_est)
## UK/US and UK/Canada exchange rates
library(ismev)
data("exchange")
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
whill <- seq(0, 1, by = 0.001)
w <- seq(0, 1, by = 0.01)
q <- 0.85
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
rc_gof_cl <- rc_gof(curve_cl)
rc_unc_cl <- rc_unc(curve_cl)
str(curve_cl)
plot(curve_cl)
plot(rc_unc)
plot(rc_unc_cl)
str(margdata)
str(curve_cl)
example("rc_gof")
str(rc_orig)
plot(rc_orig)
rm(list = ls())
library(ReturnCurves)
example(rc_orig)
example(rc_est)
margdata
margdata@thresh
example(rc_est)
example(adf_est)
example(adf_gof)
example(rc_gof)
example(rc_gof)
min(data[, 1])
min(data[, 2])
example(rc_gof)
example(rc_gof)
example(rc_gof)
example(rc_gof)
example(rc_gof)
example(rc_gof)
example(rc_gof)
example(rc_unc)
rm(list=ls())
library(ReturnCurves)
## UK/US and UK/Canada exchange rates
library(ismev)
data("exchange")
margdata <- margtransf(exchange, qmarg = c(0.85, 0.85))
whill <- seq(0, 1, by = 0.001)
w <- seq(0, 1, by = 0.01)
q <- 0.85
prob <- 10/dim(exchange)[1]
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
curve_cl <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2))
plot(curve_cl)
rc_gof_cl <- rc_gof(curve_cl)
plot(rc_gof_cl)
rc_unc_cl <- rc_unc(curve_cl)
plot(rc_unc_cl)
curve_cl2 <- rc_est(margdata = margdata, p = prob, method = "cl", q = q, qalphas = rep(q, 2), constrained = T)
rc_unc_cl2 <- rc_unc(curve_cl2)
plot(rc_unc_cl2)
?`ReturnCurves-package`
library(anomaly)
?`anomaly-package`
?anomaly
?`ReturnCurves-package`
setwd("~/Desktop/ReturnCurves")
?`ReturnCurves-package`
?anomally
?anomaly
library(anomaly)
?anomaly
?rc_est
library(ReturnCurves)
?`ReturnCurves-package`
?rc_est
set.seed(321)
data <- cbind(rnorm(1000), rnorm(1000))
margdata <- margtransf(dta)
margdata <- margtransf(data)
lamnda <- adf_est(ma)
lamnda <- adf_est(margdata, method= "hill")
w <- lamnda@w
w
ray <- 0.015
ray <- 0.0157
diff <- abs(ray - w)
diff
which.min(diff)
w[3]
ray <- 0.015
diff
diff <- abs(ray - w)
which.min(diff)
ray <- 0.015
diff <- abs(ray - w)
which.min(diff)
diff
?adf_est
?adf_gof
?adf_gof
example("adf_gof")
adf_gof(adf = lambda, w = 0.02)
adf_gof(adf = lambda, ray = 0.02)
gof <- adf_gof(adf = lambda, ray = 0.02)
plot(gof)
gof <- adf_gof(adf = lambda, ray = 0.0275)
plot(gof)
?adf_gof
1:2/3
sort(c(12, 5, 2, 3))
?adf_gof
example("adf_gof")
?adf_gof
?rc_est
?adf_gof
?adf_gof
?rc_unc
?adf_est
?rc_unc
?rc_gof
?rc_gof
?rc_gof
?rc_gof
?rc_unc
?rc_unc
?rc_unc
?rc_unc
example(adf_est)
example(adf_gof)
rm(list = ls())
library(ReturnCurves)
example(adf_gof)
example(adf_gof)
attr(gof, "ray")
example(adf_gof)
example(adf_gof)
example(adf_gof)
bquote("Goodness of fit of" ~ hat(lambda)(omega) ~ "at" ~ omega ~ "=" ~ .(gof@ray))
example(adf_gof)
rm(list = ls())
library(ReturnCurves)
?`ReturnCurves-package`
library(ReturnCurves)
?`ReturnCurves-package`
library(ReturnCurves)
?`ReturnCurves-package`
?adf_est
library(ReturnCurves)
?adf_est
library(ReturnCurves)
?adf_est
library(ReturnCurves)
?adf_est
library(ReturnCurves)
?adf_gof
library(ReturnCurves)
?adf_gof
library(ReturnCurves)
?adf_gof
library(ReturnCurves)
?adf_gof
?adf_est
?adf_gof
library(ReturnCurves)
?adf_gof
library(ReturnCurves)
?adf_est
?rc_est
?rc_unc
library(ReturnCurves)
?rc_gof
library(ReturnCurves)
?rc_gof
?adf_gof
?adf_est
library(ReturnCurves)
?rc_gof
?rc_unc
library(ReturnCurves)
?rc_gof
?rc_unc
library(ReturnCurves)
?rc_unc
library(ReturnCurves)
?rc_unc
library(ReturnCurves)
?rc_unc
example(adf_est)
example(adf_gof)
example("rc_est")
example("rc_gof")
example("rc_unc")
start <- Sys.time()
rc_unc(rc_orig, nboot = 100)
end <- Sys.time() - start
end
start <- Sys.time()
a <- rc_unc(rc_orig, nboot = 100)
Sys.time() - start
start <- Sys.time()
a <- rc_unc(rc_orig, nboot = 100)
Sys.time() - start
example("ReturnCurves-package")
?`ReturnCurves-package`
?`ReturnCurves-package`
