sum(length(which(is.na(a))))
sum(length(which(is.na(a[, 1]))))
sum(length(which(is.na(a[, 2]))))
apply(a, 2, function(i) sum(length(which(is.na(i)))))
spply(a, function(i) sum(length(which(is.na(i)))))
sapply(a, function(i) sum(length(which(is.na(i)))))
sapply(a, function(i) sum(is.na(i)))
spply(a, function(i) sum((is.na(i)))
apply(a, 2,  function(i) sum((is.na(i)))
)
colSums(a, is.na)
colSums(is.na(a))
invisible(lapply(names(nas[nas > 0]), function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
}))
nas <- colSums(is.na(a))
invisible(lapply(names(nas[nas > 0]), function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
}))
lapply(names(nas[nas > 0]), function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
}))
lapply(names(nas[nas > 0]), function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
})
nas
names(nas[nas > 0])
nas[nas > 0]
lapply(nas[nas > 0], function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
})
invisible(lapply(nas[nas > 0], function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
}))
invisible(sapply(nas[nas > 0], function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
}))
sapply(nas[nas > 0], function(col) {
warning(paste0("There are ", nas[col], " missing values in the column '", col, "'."))
})
invisible(sapply(nas[nas > 0], function(i){
warning(paste0("There are ", nas[i], " missing values in margin X", i))
}))
warnings <- mapply(function(i, n) {
if (n > 0) {
warning(paste("There are", n, "missing values in the column", col))
}
}, names(nas), nas)
warnings <- mapply(function(i, n) {
if (n > 0) {
warning(paste("There are", n, "missing values in the column", i))
}
}, names(nas), nas)
warnings <- mapply(function(i, n) {
if (n > 0) {
warning(paste("There are", n, "missing values in the column", i))
}
}, nas, nas)
rm(list = ls())
library(ReturnCurves)
View(margtransf())
View(margtransf
)
margtransf(a)
a <- cbind(c(rnorm(4), NA, rexp(2), NA, rnorm(2)), c(rnorm(9), NA))
margtransf(a)
?margtransf
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
# Convert to data frame for easier handling
data <- as.data.frame(data)
# Number of elements in the data frame
num_elements <- nrow(data) * ncol(data)
# Define the percentage of NA values
na_percentage <- 0.05
# Number of NA values to introduce
num_na <- round(num_elements * na_percentage)
# Randomly select indices to replace with NA
na_indices <- sample(1:num_elements, num_na, replace = FALSE)
# Assign NA values to the selected indices
data[na_indices] <- NA
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
num_elements
num_na
# Define the percentage of NA values
na_percentage <- 0.01
# Number of NA values to introduce
num_na <- round(num_elements * na_percentage)
num_na
sample(1:num_elements, num_na, replace = FALSE)
sample
?sample
sample.int(1:1010)
sample.int(1:10, 5)
sample.int(1:10)
sample.int(1:10)
sample.int(1:10, 3)
1:10
sample(1:nrow(data), round(runif(1, 1, 100)))
samplemarg1 <- sample(1:nrow(data), round(runif(1, 1, 100)))
samplemarg2 <- sample(1:nrow(data), round(runif(1, 1, 100)))
data[samplemarg1, ] <- NA
data[samplemarg2, ] <- NA
head(data)
head(data)
tail(data)
samplemarg1
samplemarg2
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
data[samplemarg1, 1] <- NA
data[samplemarg2, 2] <- NA
head(data)
data[39, ]
table(samplemarg1 == samplemarg2)
which(samplemarg1 == samplemarg2)
margtransf(sata)
margtransf(data)
colSums(data)
colSums(is.na(data))
nas <- colSums(is.na(data))
invisible(sapply(1:length(nas[nas > 0]), function(i){
warning(paste0("There are ", nas[i], " missing values in margin X", i, "."))
}))
apply(data, 2, empirical_cdf, qmarg = 0.95)
apply(data, 2, ReturnCurves:::empirical_cdf, qmarg = 0.95)
dataunif <- apply(data, 2, ReturnCurves:::empirical_cdf, qmarg = 0.95)
length(dataunif[, 1])
length(dataunif[[1]])
length(dataunif[[2]])
1000 - 68
1000 - 63
apply(data, 2, ReturnCurves:::empirical_cdf, qmarg = 0.95, simplify = F)
apply(data, 2, ReturnCurves:::empirical_cdf, qmarg = 0.95, simplify = T)
apply(dataunif, 2, qexp)
sapply(dataunif, qexp)
sapply(dataunif, qexp, simplify = F)
sapply(dataunif, qexp, simplify = T)
?apply
sapply(dataunif, qexp, simplify = "array")
vapply(dataunif, qexp, simplify = "array")
b <- sapply(dataunif, qexp)
simplify2array(b)
?adf_est
nas
which(is.na)
which(is.na(data))
c <- which(is.na(data))
d <- sort(c(samplemarg1, samplemarg2))
d
c <- c(which(is.na(data[, 1])), which(is.na(data[,2])))
c
sort(c)
c <- sort(c(which(is.na(data[, 1])), which(is.na(data[,2]))))
table(c == d)
e <- which(is.na(data))
e[e > 1000] <- e[e > 1000] - 1000
e
table(e == d)
table(sort(e) == d)
dataexp <- sapply(dataunif, qexp)
dataexp
f <- dataexp[[1]]
f
samplemarg1
dataexp[samplemarg1, 1] <- NA
f[samplemarg1, 1] <- NA
f[samplemarg1] <- NA
length(f)
f <- dataexp[[1]]
empirical_cdf <- function(data, qmarg = 0.95) {
compldata <- data[complete.cases(data)]
u <- c()
thresh <- quantile(compldata, qmarg)
if (qmarg == 1) {
stop("Threshold u too high, leading to no exceedances to fit the GPD.")
}
par <- gpd.fit(compldata, threshold = thresh, show = FALSE)$mle
if (par[2] <= -1) {
warning("MLE for the shape parameter of the GPD is < -1. \n Fitted endpoint is the maximum data point.")
}
if (par[2] < -0.5 && par[2] > -1) {
warning("MLE for the shape parameter of the GPD is in (-1, -0.5). \n Non-regular MLE and a very short marginal tail is estimated.")
}
u[!is.na(data) & data <= thresh] <- ranktransform(data = compldata, thresh = thresh)
u[!is.na(data) & data > thresh] <- gpdtransform(data = compldata[compldata > thresh], thresh = thresh, par = par, qmarg = qmarg)
u[is.na(data)] <- NA
return(u)
}
apply(data, 2, empirical_cdf, qmarg = 0.95)
ranktransform <- function(data, thresh) rank(data)[data <= thresh]/(length(data) + 1)
gpdtransform <- function(data, thresh, par, qmarg) 1 - (1 - qmarg)*pgpd(data, loc = thresh, scale = par[1], shape = par[2], lower.tail = F)
library(ismev)
library(evd)
apply(data, 2, empirical_cdf, qmarg = 0.95)
.margtransf.class <- setClass("margtransf.class", representation(data = "array",
qmarg = "numeric",
dataexp = "array"))
margtransf.class <- function(data, qmarg, dataexp){
.margtransf.class(data = data,
qmarg = qmarg,
dataexp = dataexp)
}
x <- margtransf.class(data, 0.95, apply(data, 2, empirical_cdf, qmarg = 0.95))
x
df <- data.frame("X" = x@dataexp[, 1], "Y" = x@dataexp[, 2])
library(ggplot2)
library(dplyr)
library(latex2exo)
library(latex2exp)
df %>% ggplot(aes(x = X, y = Y)) + geom_point()
df %>% ggplot(aes(x = 1:length(X), y = X)) + geom_point()
df %>% ggplot(aes(x = 1:length(X), y = X)) + geom_hist()
df %>% ggplot(aes(x = 1:length(X), y = X)) + geom_histogram()
df %>% ggplot(aes(x = X)) + geom_histogram()
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white")
dataunif <- apply(data, 2, empirical_cdf, qmarg = 0.95)
x <- margtransf.class(data, 0.95, apply(dataunif, 2, qexp))
df <- data.frame("X" = x@dataexp[, 1], "Y" = x@dataexp[, 2])
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white")
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white") +
geom_histogram(df, aes(y = Y), color="red", fill="white")
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white") +
geom_histogram(df, mapping = aes(y = Y), color="red", fill="white")
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white") +
geom_histogram(df, mapping = aes(x = Y), color="red", fill="white")
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white") +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
?geom_histogram
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white", na.rm = T,aes(y=..density..)) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white", na.rm = T, after_stat(density())) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white", na.rm = T, after_stat(density)) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white", na.rm = T, aes(after_stat(density))) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X)) + geom_histogram(color="black", fill="white", na.rm = T) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X)) + geom_histogram(color="red", alpha = 0.05, na.rm = T) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X,color="red", )) + geom_histogram(alpha = 0.05, na.rm = T) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X, color="red")) + geom_histogram(alpha = 0.05, na.rm = T) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X, color="red")) + geom_histogram(alpha = 0.5, na.rm = T) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X, color="red", fill = "darkred")) + geom_histogram(alpha = 0.5, na.rm = T) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X, col = "red", fill = "darkred")) + geom_histogram(alpha = 0.5, na.rm = T) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X, col = "red", fill = "darkred")) + geom_histogram(alpha = 0.5, na.rm = T, show.legend = F) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X, col = "darkred", fill = "red")) + geom_histogram(alpha = 0.5, na.rm = T, show.legend = F) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X, col = "darkred", fill = "red")) + geom_histogram(alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + ggtitle(TeX("Marginal transformation of $X$"))
hist(x@dataexp[,1])
df %>% ggplot(aes(x = X, col = "darkred", fill = "red")) + geom_histogram(alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + labs(y="Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
a <- df %>% ggplot(aes(x = X, col = "darkred", fill = "red")) + geom_histogram(alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
b <- df %>% ggplot(aes(x = Y, col = "darkgreen", fill = "green")) + geom_histogram(alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = Y, col = "darkgreen", fill = "green")) + geom_histogram(alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
a <- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
a
df %>% ggplot(aes(x = Y)) + geom_histogram( col = "darkgreen", fill = "green", alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = Y)) + geom_histogram( col = "darkblue", fill = "blue", alpha = 0.3, na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
library(cowplot)
<- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
a <- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
b <- df %>% ggplot(aes(x = Y)) + geom_histogram( col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $Y$"))
plot_grid(a, b)
dforig <- data.frame("X" = x@data[, 1], "Y" = x@data[, 2])
a <- dforig %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
b <- dforig %>% ggplot(aes(x = Y)) + geom_histogram( col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Original margin of $Y$"))
plot_grid(a, b)
df <- data.frame("X" = x@dataexp[, 1], "Y" = x@dataexp[, 2])
a <- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
b <- df %>% ggplot(aes(x = Y)) + geom_histogram( col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Marginal transformation of $Y$"))
dforig <- data.frame("X" = x@data[, 1], "Y" = x@data[, 2])
c <- dforig %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
d <- dforig %>% ggplot(aes(x = Y)) + geom_histogram( col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(y = "Frequency") + ggtitle(TeX("Original margin of $Y$"))
plot_grid(c, a, d, b, nrow = 2)
df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(X[exp], y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(X[exp]), y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
df <- data.frame("X" = x@data[, 1], "Y" = x@data[, 2], "Xexp" = x@dataexp[, 1], "Yexp" = x@dataexp[, 2])
origX <- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = X, y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
df <- data.frame("X" = x@data[, 1], "Y" = x@data[, 2], "Xexp" = x@dataexp[, 1], "Yexp" = x@dataexp[, 2])
origX <- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = "X", y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
expX <- df %>% ggplot(aes(x = Xexp)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(X[exp]), y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
origY <- df %>% ggplot(aes(x = Y)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = "Y", y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
expY <- df %>% ggplot(aes(x = Yexp)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(Y[exp]), y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
plot_grid(origX, expX, origY, expY, nrow = 2)
df <- data.frame("X" = x@data[, 1], "Y" = x@data[, 2], "Xexp" = x@dataexp[, 1], "Yexp" = x@dataexp[, 2])
origX <- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = "X", y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
expX <- df %>% ggplot(aes(x = Xexp)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(X[exp]), y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
origY <- df %>% ggplot(aes(x = Y)) + geom_histogram(col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = "Y", y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
expY <- df %>% ggplot(aes(x = Yexp)) + geom_histogram(col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(Y[exp]), y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
plot_grid(origX, expX, origY, expY, nrow = 2)
rm(list = ls())
library(ReturnCurves)
example("margtransf")
dataexp
plot(dataexp)
rm(list = ls())
library(ReturnCurves)
View(margtransf())
View(margtransf)
example("margtransf")
rm(list = ls())
library(ReturnCurves)
example("margtransf")
colSums(is.na(data))
1:length(nas[nas > 0])
nas <- colSums(is.na(data))
1:length(nas[nas > 0])
nas > 0
if(nas == 0){print("hi")}
if(any(nas == 0)){print("hi")}
if(any(nas > 0)){
invisible(sapply(1:length(nas[nas > 0]), function(i){
warning(paste0("There are ", nas[i], " missing values in margin X", i, ".\n These were removed."))
}))
}
dataunif <- apply(data, 2, ReturnCurves:::empirical_cdf, qmarg = qmarg)
dataunif <- apply(data, 2, ReturnCurves:::empirical_cdf, qmarg = 0.95)
result <- margtransf.class(data = data, qmarg = 0.95, dataexp = array())
.margtransf.class <- setClass("margtransf.class", representation(data = "array",
qmarg = "numeric",
dataexp = "array"))
margtransf.class <- function(data, qmarg, dataexp){
.margtransf.class(data = data,
qmarg = qmarg,
dataexp = dataexp)
}
setMethod("plot", signature = list("margtransf.class"), function(x){
df <- data.frame("X" = x@data[, 1], "Y" = x@data[, 2], "Xexp" = x@dataexp[, 1], "Yexp" = x@dataexp[, 2])
origX <- df %>% ggplot(aes(x = X)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = "X", y = "Frequency") + ggtitle(TeX("Original margin of $X$"))
expX <- df %>% ggplot(aes(x = Xexp)) + geom_histogram(col = "darkred", fill = "red", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(X[exp]), y = "Frequency") + ggtitle(TeX("Marginal transformation of $X$"))
origY <- df %>% ggplot(aes(x = Y)) + geom_histogram(col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = "Y", y = "Frequency") + ggtitle(TeX("Original margin of $Y$"))
expY <- df %>% ggplot(aes(x = Yexp)) + geom_histogram(col = "darkblue", fill = "blue", alpha = 0.3,
na.rm = T, show.legend = F) +
theme_minimal() + labs(x = expression(Y[exp]), y = "Frequency") + ggtitle(TeX("Marginal transformation of $Y$"))
plot_grid(origX, expX, origY, expY, nrow = 2)
})
result <- margtransf.class(data = data, qmarg = 0.95, dataexp = array())
result@dataexp <- apply(dataunif, 2, qexp)
plot(result)
library(ggplot2, cowplot, dplyr)
library(ggplot2, cowplot, dplyr)
library(ggplot2)
library(cowplot)
library(latex2exp)
library(dplyr)
plot(result)
library(ReturnCurves)
example("margtransf")
rm(list = ls())
library(ReturnCurves)
example("margtransf")
?margtransf
rm(list = ls())
library(ReturnCurves)
example("rc_est")
library(ReturnCurves)
example(rc_est)
example("margtransf")
rm(list = ls())
library(ReturnCurves)
example("margtransf")
rm(list = ls())
rm(list = ls())
library(ReturnCurves)
library(ReturnCurves)
example("margtransf")
?margtransf
?rc_unc
rm(list = ls())
library(ReturnCurves)
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
samplemarg1 <- sample(1:nrow(data), round(runif(1, 1, 100)))
samplemarg2 <- sample(1:nrow(data), round(runif(1, 1, 100)))
data[samplemarg1, 1] <- NA
data[samplemarg2, 2] <- NA
colSums(data)
colSums(is.na(data))
apply(colSums(is.na(data)), 2, sum)
colSums(is.na(data))
sapply(colSums(is.na(data)), sum)
sum(colSums(is.na(data)))
sum(is.na(data))
a <- data[complete.cases(data), ]
dim(a)
1000-103
table(samplemarg1 == samplemarg2)
which(samplemarg1 == samplemarg2)
sort(c(samplemarg1, samplemarg2))
b <- sort(c(samplemarg1, samplemarg2))
length(b)
c <- unique(b)
length(c)
?adf_est
rm(list = ls())
library(ReturnCurves)
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
samplemarg1 <- sample(1:nrow(data), round(runif(1, 1, 100)))
samplemarg2 <- sample(1:nrow(data), round(runif(1, 1, 100)))
data[samplemarg1, 1] <- NA
data[samplemarg2, 2] <- NA
margtransf(data)
margdata <- margtransf(data)
adf_est(margdata@dataexp, method = "hill")
rm(list = ls8)
rm(list = ls())
library(ReturnCurves)
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
samplemarg1 <- sample(1:nrow(data), round(runif(1, 1, 100)))
samplemarg2 <- sample(1:nrow(data), round(runif(1, 1, 100)))
data[samplemarg1, 1] <- NA
data[samplemarg2, 2] <- NA
dataexp <- margtransf(data)@dataexp
set.seed(321) # for reproducibility
# Generate the data
data <- cbind(rnorm(1000), rnorm(1000))
set.seed(1)
samplemarg1 <- sample(1:nrow(data), round(runif(1, 1, 100)))
set.seed(2)
samplemarg2 <- sample(1:nrow(data), round(runif(1, 1, 100)))
data[samplemarg1, 1] <- NA
data[samplemarg2, 2] <- NA
dataexp <- margtransf(data)@dataexp
plot(dataexp)
margdata <- margtransf(data)
plot(margdata)
plot(margdata, joint = T)
27 + 19
lambda <- adf_est(margdata@dataexp, method = "hill")
plot(lambda)
lambda <- adf_est(margdata@dataexp, method = "cl")
plot(lambda)
print(plot(margdata))
print(plot(margdata, joint = T))
margdata <- margtransf(data)
plot(margdata, joint = T)
?plot_grid
plot(margdata, joint = T)
?geom_point
plot(margdata, joint = T)
plot(margdata, joint = T)
