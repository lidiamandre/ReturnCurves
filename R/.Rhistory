for(j in (floor(length(w)/2)+2):(length(w))){
if((w/est)[j]<(w/est)[j-1] ){
est[j] = (w[j])*(est/w)[j-1]
}
if(((1-w)/est)[j]>((1-w)/est)[j-1] ){
est[j] = ((1-w)[j])*(est/(1-w))[j-1]
}
}
return(est)
}
est_lam_wrapper = function(data){
est_lam_hill = c()
r = c()
for(i in 1:length(w)){
min_proj = pmin(data[,1]/w[i],data[,2]/(1-w[i]))
est_lam_hill[i] = 1/mean(min_proj[min_proj>quantile(min_proj,0.90)] - quantile(min_proj,0.90)) #hill estimator of the angular dependence function
r[((i-1)*m+1):(i*m)] = as.vector(quantile(min_proj,q2) - quantile(min_proj,q1))
}
est_beta_cl = minimisation_function(w_mat=w_mat,k=k_cl,q=q,data_exp = data)
basis_cl = bp2d(w=w_mat,k=k_cl)
est_lam_cl = as.vector(basis_cl%*%est_beta_cl)
est_beta_pr = minimisation_function2(w_mat = w_mat,k=k_pr,frac = frac,r=r,no_quant = m)
basis_pr = bp2d(w=w_mat,k=k_pr)
est_lam_pr = as.vector(basis_pr%*%est_beta_pr)
alphas = heff_tawn_alphas(data = data,q=0.9)
est_lam_hill2 = c()
est_lam_cl2 = c()
est_lam_pr2 = c()
alpha_index = w < (alphas[1]/(1+alphas[1])) | w > (1/(1+alphas[2]))
if(sum(!alpha_index) < 2){
est_lam_hill2 = pmax(w,1-w)
est_lam_cl2 = pmax(w,1-w)
est_lam_pr2 = pmax(w,1-w)
} else {
est_lam_hill2[alpha_index] = pmax(w,1-w)[alpha_index]
est_lam_cl2[alpha_index] = pmax(w,1-w)[alpha_index]
est_lam_pr2[alpha_index] = pmax(w,1-w)[alpha_index]
est_lam_hill2[!alpha_index] = est_lam_hill[!alpha_index]
a = (alphas[1]/(1+alphas[1]))
b = (1/(1+alphas[2]))
v = seq(a,b,length.out = sum(!alpha_index))
frac2 = rep((1-q2)/(1-q1),length(v))
r2 = c()
for(i in 1:length(v)){
min_proj = pmin(data[,1]/(v[i]),data[,2]/(1-v[i]))
for(j in 1:length(q1)){
r2[(i-1)*length(q1) + j] = quantile(min_proj,q2[j]) - quantile(min_proj,q1[j])
}
}
est_beta_cl2 = minimisation_function3(v=v,k=k_cl,q=q,data_exp = data,lam_end=c((1/(1+alphas[1])),(1/(1+alphas[2]))))
basis2_cl = bp2d_const(v=v,k=k_cl,a=a,b=b)
est_lam_cl2[!alpha_index] = basis2_cl%*%est_beta_cl2
est_beta_pr2 = minimisation_function4(v=v,k=k_pr,frac=frac2,r=r2,no_quant=length(q1),lam_end=c((1/(1+alphas[1])),(1/(1+alphas[2]))))
basis2_pr = bp2d_const(v=v,k=k_pr,a=a,b=b)
est_lam_pr2[!alpha_index] = basis2_pr%*%est_beta_pr2
}
estimate_st = consistentEstimation(data,  quant=0.999, thresh.quant=0.5, nei=100, len=199, knot.num=7, deltas=seq(0.01,1,0.01), omegas=w)
est_lam_st = estimate_st$lambda
return(rbind(est_lam_hill,est_lam_cl,est_lam_pr,est_lam_hill2,est_lam_cl2,est_lam_pr2,est_lam_st))
}
}
w = seq(0,1,length.out=1001)#rays considered for estimation
w_mat = cbind(w,1-w)
k_cl = 7#BB polynomial degree
k_pr = 7#BB polynomial degree
q = 0.9#quantile level for min-projection
q1 = seq(0.87,0.93,by=0.002) #quantile levels considered for probability ratio estimators
q2 = q1 + 0.05
frac = rep((1-q2)/(1-q1),length(w))
m=length(q1)
lapply(exp_datasets, summary)
?evd::fbvevd
?evd:::fbvevd
evd:::fbvevd
?bvdist
?evd::bvdist
lambda_estimates = list()
for(cn in 1:dim(unique_pairs)[1]){
lambda_estimates[[cn]] = est_lam_wrapper(data=cbind(exp_datasets[[unique_pairs[cn,1]]],exp_datasets[[unique_pairs[cn,2]]]))
}
unique_pairs = cbind(c(1,1,1,1,1),c(2,3,4,5,6))
lambda_estimates = list()
for(cn in 1:dim(unique_pairs)[1]){
lambda_estimates[[cn]] = est_lam_wrapper(data=cbind(exp_datasets[[unique_pairs[cn,1]]],exp_datasets[[unique_pairs[cn,2]]]))
}
lambda_estimates = lapply(lambda_estimates,function(x){x[1:6,] = t(apply(x[1:6,],1,theoretical_properties,w=w));return(x)})
lambda_estimates = lapply(lambda_estimates,function(x){x[c(1:2, 4:5),] = t(apply(x[c(1:2, 4:5),],1,theoretical_properties,w=w));return(x)})
colours = brewer.pal(7, "Dark2")
lambda_estimates[[1]]
lambda_estimates[[1]][1, ]
lambda_estimates[[1]][2, ]
lambda_estimates[[1]][3, ]
lambda_estimates[[1]][5, ]
lambda_estimates[[1]][6, ]
lambda_estimates[[1]][7, ]
lambda_estimates[[1]][8, ]
lambda_estimates = list()
for(cn in 1:dim(unique_pairs)[1]){
lambda_estimates[[cn]] = est_lam_wrapper(data=cbind(exp_datasets[[unique_pairs[cn,1]]],exp_datasets[[unique_pairs[cn,2]]]))
}
pdf(file="adf_ests_sub_lidia.pdf",width=9,height=6)
par(mfrow=c(2,3),mgp=c(2.5,1,0),mar=c(5,4,4,2)+0.1)
for(cn in 1:dim(unique_pairs)[1]){
plot(w,lambda_estimates[[cn]][1,] ,type="l",col=colours[3],lwd=2,ylim=c(0.5,1.2),xlab=expression(w),ylab=expression(lambda(w)),main = paste0(riv_names[cn+1]," vs Lune - original margins"),cex.lab=1.2, cex.axis=1.2,cex.main=1.4)
lines(w,lambda_estimates[[cn]][2,],lwd=2,col=colours[4],lty=1)
lines(w,lambda_estimates[[cn]][4,],lwd=2,col=colours[5],lty=1)
lines(w,lambda_estimates[[cn]][5,],lwd=2,col=colours[6],lty=1)
lines(w,pmax(w,1-w),lwd=2,col=1,lty=2)
}
plot(1, type="n", axes=FALSE, xlab="", ylab="")
legend(.75,1.35,cex=1, legend =c('Lower Bound', expression(paste(lambda[H])),expression(paste(lambda[H2])), expression(paste(lambda[CL])), expression(paste(lambda[CL2]))), lwd=2, lty=c(2,rep(1,3)),col = c(1, colours[3:6]))
dev.off()
prob
ReturnCurves:::minfunction_mle
ReturnCurves:::est_beta
ReturnCurves:::HeffTawnNegLL
?ismev::gpd.fit
data <- cbind(rnorm(1000), rnorm(1000))
plot(data, pch = 20))
plot(data, pch = 20)
par(mfrow = c(1,1))
plot(data, pch = 20)
dataexp <- margtransf(data)
library(ReturnCurves)
dataexp <- margtransf(data)
plot(dataexp, pch = 20)
hist(dataexp[, 1])
hist(dataexp[, 2])
data <- cbind(rnorm(1000), rnorm(1000))
dataexp <- margtransf(data)
plot(dataexp, pch = 20)
dim(data)
prob <- 10/(dim(data)[1])
rc <- rc_est(data = dataexp, p = prob, method = "hill")
rc_orig <- curvetransf(curvedata = rc, data = data)
unc <- rc_unc(data = data, p = prob, method = "hill")
plot(data, xlab = "X", ylab = "Y", pch = 16)
lines(rc_orig, lwd = 2, col = 2)
lines(unc$median, lwd = 2, col = "orange") # to plot median estimates
lines(unc$mean, lwd = 2, col = "orange")
lines(unc$upper, lty = 'dashed', col = 'blue', lwd = 2)
lines(unc$lower, lty = 'dashed', col = 'blue', lwd = 2)
plot(data, xlab = "X", ylab = "Y", pch = 16, col = "grey")
lines(rc_orig, lwd = 2, col = 2)
lines(unc$median, lwd = 2, col = "orange") # to plot median estimates
lines(unc$mean, lwd = 2, col = "blue")
lines(unc$lower, lty = 'dashed', lwd = 2)
lines(unc$upper, lty = 'dashed', lwd = 2)
rc_orig
gof <- rc_gof(data = data, rc_origin = rc_orig)
ang <- 1:length(gof$median)
plot(ang, gof$median, xlab = "Angle Index", ylab = "Probability")
gof$median
plot(ang, gof$median, xlab = "Angle Index", ylab = "Probability", type = "n")
polygon(c(rev(ang), ang), c(rev(gof$lower), gof$upper), col = 'grey80', border = NA)
plot(ang, gof$median, xlab = "Angle Index", ylab = "Probability", type = "n",
#' ylim = c(-0.001, range(gof$upper)[2] + 0.001))
)
polygon(c(rev(ang), ang), c(rev(gof$lower), gof$upper), col = 'grey80', border = NA)
plot(ang, gof$median, xlab = "Angle Index", ylab = "Probability", type = "n",
#' ylim = c(-0.001, range(gof$upper)[2] + 0.001)))
)
ang <- 1:length(gof$median)
plot(ang, gof$median, xlab = "Angle Index", ylab = "Probability", type = "n", ylim = c(-0.001, range(gof$upper)[2] + 0.001))
polygon(c(rev(ang), ang), c(rev(gof$lower), gof$upper), col = 'grey80', border = NA)
lines(ang, gof$median, lwd = 2)
lines(ang, gof$upper, lty = 'dashed', col = 'blue', lwd = 2)
lines(ang, gof$lower, lty = 'dashed', col = 'blue', lwd = 2)
lines(ang, rep(prob, length(ang)), lwd = 3, col = 2)
1/1000
10/1000
library(ReturnCurves)
?margtransf
example("margtransf")
rm(list = ls())
example("margtransf")
dataexp
plot(dataexp, pch = 20)
?curvetransf
example("curvetransf")
plot(data, pch = 20, main = "Return Curve on the original margins")
lines(rc_orig, col = 2, lwd = 2)
?rc_est
example(rc_est)
plot(dataexp, pch = 20, main = "Return Curve on exponential margins")
lines(rc, col = 2, lwd = 2)
plot(dataexp, pch = 20, main = "Return Curve on exponential margins")
lines(rc, col = 2, lwd = 2)
?rc_unt
?rc_unc
example(rc_unc)
plot(data, xlab = "X", ylab = "Y", pch = 20, col = "grey")
lines(rc_orig, lwd = 2, col = 2)
lines(unc$median, lwd = 2, col = "orange") # to plot median estimates
lines(unc$mean, lwd = 2, col = "orange") # to plot mean estimates
lines(unc$upper, lty = 'dashed', lwd = 2)
lines(unc$lower, lty = 'dashed', lwd = 2)
?rc_gof
example(rc_gof)
ang <- 1:length(gof$median)
plot(ang, gof$median, xlab = "Angle Index", ylab = "Probability", type = "n", ylim = c(-0.001, range(gof$upper)[2] + 0.001))
polygon(c(rev(ang), ang), c(rev(gof$lower), gof$upper), col = 'grey80', border = NA)
lines(ang, gof$median, lwd = 2)
lines(ang, gof$upper, lty = 'dashed', col = 'blue', lwd = 2)
lines(ang, gof$lower, lty = 'dashed', col = 'blue', lwd = 2)
lines(ang, rep(prob, length(ang)), lwd = 3, col = 2)
?adf_est
example(adf_est)
plot(w, pmax(w, 1-w), type = "l", lty = 2)
lines(w, adf, col = 2, lwd = 2)
plot(w, pmax(w, 1-w), type = "l", lty = 2, ylim = c(min(pmax(w, 1-w)), max(adf) + 0.1))
plot(w, pmax(w, 1-w), type = "l", lty = 2)
lines(w, adf, col = 2, lwd = 2)
plot(w, pmax(w, 1-w), type = "l", lty = 2, ylim = c(min(pmax(w, 1-w)), max(adf) + 0.1))
lines(w, adf, col = 2, lwd = 2)
plot(w, pmax(w, 1-w), type = "l", lty = 2, ylim = c(min(pmax(w, 1-w)), max(adf) + 0.01))
lines(w, adf, col = 2, lwd = 2)
seq(0, 1, by = 0.001)
?adf_gof
example(adf_gof)
plot(gof$model, gof$empirical, ylab = "Empirical", xlab = "Model")
polygon(c(rev(gof$model), gof$model), c(rev(gof$lower), gof$upper), col = 'grey', border = NA)
points(gof$model, gof$empirical, pch = 20, col = "black")
abline(0, 1, col = 2,lwd = 3)
?adf_est
library(ReturnCurves)
?adf_est
?rc_unc
example(rc_unc)
plot(data, xlab = "X", ylab = "Y", pch = 20, col = "grey")
lines(rc_orig, lwd = 2, col = 2)
lines(unc$median, lwd = 2, col = "orange") # to plot median estimates
lines(unc$mean, lwd = 2, col = "orange") # to plot mean estimates
lines(unc$upper, lty = 'dashed', lwd = 2)
lines(unc$lower, lty = 'dashed', lwd = 2)
?rc_est
?curvetransf
?rc_unc
?rc_gof
?rc_gof
?curvetransf
?rank
?optim
library(ReturnCurves)
?adf_est
library(ReturnCurves)
?adf_est
library(ReturnCurves)
?adf_est
example(adf_est)
?adf_est
plot(w, pmax(w, 1-w), type = "l", lty = 2, ylim = c(min(pmax(w, 1-w)), max(adf) + 0.1))
lines(w, adf, col = 2, lwd = 2)
?rc_est
example(rc_est)
library(ReturnCurves)
?rc_est
example(rc_est)
plot(dataexp, pch = 20, main = "Return Curve on exponential margins")
lines(rc, col = 2, lwd = 2
)
example("curvetransf")
?curve
?curvetransf
plot(data, pch = 20, main = "Return Curve on the original margins")
lines(rc_orig, col = 2, lwd = 2)
example(adf_gof)
example(rc_unc)
example("rc_gof")
example(adf_gof)
?adf-gof
?adf_gof
library(ReturnCurves)
?adf_gof
example("adf_gof")
setwd("~/luna/Return Curves Project/ReturnCurves/R")
library(ReturnCurves)
?adf_gof
example("adf_gof")
library(ReturnCurves)
?adf_est
library(ReturnCurves)
adf_gof
?adf_gof
library(ReturnCurves)
?adf_gof
library(ReturnCurves)
example(adf_est)
example(adf_gof)
?curvetransf
example("curvetransf")
library(ReturnCurves)
?margtransf
example("margtransf")
library(ReturnCurves)
?rc_est
library(ReturnCurves)
?rc_est
library(ReturnCurves)
?rc_est
library(ReturnCurves)
?rc_est
example(rc_est)
plot(dataexp, pch = 20, main = "Return Curve on exponential margins")
lines(rc, col = 2, lwd = 2)
example("curvetransf")
library(ReturnCurves)
?rc_gof
example(rc_gof)
library(ReturnCurves)
example(rc_gof)
?rc_gof
library(ReturnCurves)
?rc_unc
example(rc_unc)
?rc_est
?rc
library(ReturnCurves)
?rc_o
example(rc_o)
rc_o(data = data, p = prob, method="hill")
library(ReturnCurves)
?adf_est
example(adf_est)
library(ReturnCurves)
?adf_est
example(adf_est)
library(ReturnCurves)
example(adf_est)
adf
library(ggplot2)
plot(adf@w, pmax(adf@w, 1-adf@w), type = "l", lty = 2, ylim = c(min(pmax(adf@w, 1-adf@w)), max(adf@adf) + 0.1))
lines(adf@w, adf@adf, col = 2, lwd = 2)
as.data.frame(adf)
df <- data.frame("w" = adf@w, "adf" = adf@adf)
head(df)
library(dplyr)
df %>% ggplot(aes(x = w, y = 1 - w)) + geom_line()
df <- data.frame("w" = adf@w, "lb" = pmax(adf@w, 1-adf@w), "adf" = adf@adf)
head(df)
df %>% ggplot(aes(x = w, y = lb)) + geom_line()
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed")
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col =2)
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda[omega]))
labs(x = expression(omega), y = expression(lambda(omega))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega)))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) + theme_bw()
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_minimal()
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geomtitle = "Angular dependence function estimates"
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geomtitle("Angular dependence function estimates")
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle("Angular dependence function estimates")
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(expression(lambda))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(expression(hat(lambda)))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(expression(hat(lambda(omega))))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(expression(hat(lambda)(omega)))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(paste0("Estimation of ", expression(hat(lambda)(omega))))
?paste0
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(paste0("Estimation of ", expression(lambda(omega))))
library(latex2exp)
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(TeX("Estimation of $\\lambda(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(TeX("Estimation of $\\hat\\lambda(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb)) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf), col = 2) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
coloursl <- c("Lower bound" = 1, "ADF estimates" = 2)
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
scale_color_manual(values = coloursl) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
scale_color_manual(values = coloursl) +
theme_bw() + theme(
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
scale_color_manual(values = coloursl) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
scale_color_manual(values = coloursl) +
theme(
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
scale_color_manual(values = coloursl, guide = guide_legend(override.aes = list(linetype = c("dashed", "solid")))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
df %>% ggplot(aes(x = w, y = lb, col = names(coloursl)[1])) + geom_line(linetype = "dashed") +
geom_line(aes(x = w, y = adf, col = names(coloursl)[2])) +
labs(x = expression(omega), y = expression(lambda(omega))) +
scale_color_manual(values = coloursl, guide = guide_legend(override.aes = list(linetype = c("solid", "dashed")))) +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
ggtitle(TeX("Estimation of $\\hat{\\lambda}(\\omega)$"))
?adf_est
